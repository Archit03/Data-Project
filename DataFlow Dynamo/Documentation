Dataflow Dynamo is Python made PostgreSQL data engineering project.
# DataModel PostgreSQL Interaction

## Introduction

This Python script interacts with a PostgreSQL database to create tables and insert data. It includes functions for creating a connection, creating a database, creating a table, and inserting data into the table.

## Prerequisites

- Python 3.x
- psycopg2 library (`pip install psycopg2`)
- PostgreSQL installed and running
- PostgreSQL server accessible with provided credentials

## Functions

### 1. `Connection()`

Establishes a connection to the PostgreSQL database server.

#### Parameters

- `host`: The hostname or IP address of the PostgreSQL server.
- `dbname`: The name of the initial database to connect to.
- `user`: The user to connect as.
- `password`: The password to be used for authentication.

#### Returns

A connection object if successful, otherwise returns None.

Prints a success or error message based on the connection status.

### 2. `create_database(conn, database_name)`

Creates a new PostgreSQL database if it does not already exist.

#### Parameters

- `conn`: A valid PostgreSQL connection object.
- `database_name`: The name of the database to be created.

Checks if the database exists, and creates it if not.

Prints success or existing database messages.

Logs errors to 'error_log.txt'.

### 3. `create_Table(conn, table_name, column)`

Creates a new table in the PostgreSQL database.

#### Parameters

- `conn`: A valid PostgreSQL connection object.
- `table_name`: The name of the table to be created.
- `column`: A dictionary specifying the columns and their data types for the table.

Iterates through the columns and their data types to create the table.

Prints a success message.

Logs errors to 'error_log.txt'.

### 4. `add_data_to_table(conn, data, table_name)`

Inserts data into an existing table in the PostgreSQL database.

#### Parameters

- `conn`: A valid PostgreSQL connection object.
- `data`: A dictionary containing the data to be inserted into the table.
- `table_name`: The name of the table where data will be inserted.

Iterates through the data dictionary to construct and execute INSERT queries.

Prints a success message.

Logs errors to 'error_log.txt'.

### 5. `query()`

Placeholder function for future database queries.

Returns None.

## Example Usage

```python
if __name__ == "__main__":
    connection = Connection()  # Get a PostgreSQL connection

    columns = {
        "Student_ID": "INTEGER PRIMARY KEY",
        "Student_Age": "INTEGER",
        "Student_Name": "VARCHAR",
        "Phone": "BIGINT"
    }

    sample_data = {
        "Student_Age": [25, 24],
        "Student_Name": ["John Doe", "Archit Sood"],
        "Phone": [1234567890, 3284883274]
    }

    if connection:
        create_database(connection, "student_info")

        if create_database:
            create_Table(connection, "Student", columns)
            add_data_to_table(connection, sample_data, "Student")
Logging
Errors and important information are logged to 'error_log.txt'.

Notes
Ensure that psycopg2 and additional dependencies are installed (run the requirements.txt file).
Review and update PostgreSQL connection parameters in the Connection function.
The script assumes all lists in the data dictionary have the same length.