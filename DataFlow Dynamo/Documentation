Data Engineering project
Overview
Briefly describe the purpose and functionality of the project.

Usage
Open the script in a text editor or an integrated development environment (IDE).
Update the PostgreSQL connection parameters in the Connection function to match your database server configuration.
Run the script.
bash
Copy code
python script_name.py
Save to grepper
Functions
1. Connection()
Parameters:

host: The hostname or IP address of the PostgreSQL server.
dbname: The name of the initial database to connect to.
user: The user to connect as.
password: The password to be used for authentication.
Returns:

A connection object if successful, otherwise returns None.
Prints:

A success or error message based on the connection status.
2. create_database(conn, database_name)
Creates a new PostgreSQL database if it does not already exist.

Parameters:

conn: A valid PostgreSQL connection object.
database_name: The name of the database to be created.
Checks:

If the database exists, and creates it if not.
Prints:

Success or existing database messages.
Logs:

Errors to 'error_log.txt'.
Example usage:
python
Copy code
if __name__ == "__main__":
    connection = Connection()  # Get a PostgreSQL connection
    if connection:
        create_database(connection, "student_info")
Save to grepper
Logging
Errors and important information are logged to 'error_log.txt'.

Notes
Ensure that psycopg2 and additional dependencies are installed (run the requirements.tex file).
Review and update PostgreSQL connection parameters in the Connection function.
1. Creating a Table:
The create_Table function allows for the creation of a table in a PostgreSQL database.

Parameters:
conn: PostgreSQL connection object.
table_name: Name of the table to be created.
columns: A dictionary specifying the columns and their data types for the table.
Example Usage:
python
Copy code
columns = {
    'id': 'SERIAL PRIMARY KEY',
    'name': 'VARCHAR(255)',
    'age': 'INTEGER',
    'gender': 'VARCHAR(10)'
}
create_Table(connection, "example_table", columns)
Save to grepper
2. Adding Data to a Table:
The add_data_to_table function inserts data into an existing table in the PostgreSQL database.

Parameters:
conn: PostgreSQL connection object.
table_name: Name of the table where data will be inserted.
data: A dictionary containing the data to be inserted into the table.
Example Usage:
python
Copy code
data = {'name': 'John Doe', 'age': 25, 'gender': 'Male'}
add_data_to_table(connection, "example_table", data)
Save to grepper
3. Querying the Database:
The query function checks if a table exists, creates it if necessary, and adds data if the table is empty.

Parameters:
database_name: Name of the PostgreSQL database.
table_name: Name of the table to be queried.
data: A dictionary containing the data to be added to the table if it is empty.
Example Usage:
python
Copy code
data = {'name': 'Jane Doe', 'age': 30, 'gender': 'Female'}
query("example_database", "example_table", data)
Save to grepper
4. Testing:
The test_create_table, test_add_data_to_table, and test_query functions in the test script demonstrate how to use the newly added functionalities.

Example Test Usage:
python
Copy code
test_create_table()
test_add_data_to_table()
test_query()
Save to grepper
5. Error Handling:
Appropriate error handling is implemented using try-except blocks to catch and log errors during database operations. Error messages are logged to the "error_log.txt" file.

6. Logging:
The logging module is utilized to log error messages and information to text files. Error logs are stored in "error_log.txt," and query logs are stored in "QueryError_log.txt."

7. Testing Script:
The provided testing script (test_script.py) demonstrates how to run tests for the implemented functionalities. Ensure the PostgreSQL server is running and accessible before executing the tests.